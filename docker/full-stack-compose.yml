version: '3.8'

services:
  # Our API service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: supachat-api
    ports:
      - "8001:8001"
    volumes:
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - CRAWL4AI_BASE_URL=http://crawl4ai:11235  # Point to the Crawl4AI service
      - SUPABASE_KEY=supabase_admin  # Use supabase_admin as the database user
      - SUPABASE_DB=postgres
      - SUPABASE_PASSWORD=${POSTGRES_PASSWORD}
      - SUPABASE_HOST=db  # Connect directly to the database
      - SUPABASE_PORT=5432  # Standard PostgreSQL port
      - SUPABASE_URL=  # Explicitly unset this variable
    command: >
      sh -c "
        echo 'Unsetting SUPABASE_URL to force direct database connection' &&
        unset SUPABASE_URL &&
        uvicorn api.main:app --host 0.0.0.0 --port 8001
      "
    depends_on:
      db:
        condition: service_healthy
      kong:
        condition: service_started
      crawl4ai:
        condition: service_started
    restart: unless-stopped
    networks:
      - supa-network

  # Crawl4AI service
  crawl4ai:
    image: unclecode/crawl4ai:basic-amd64
    container_name: supachat-crawl4ai
    ports:
      - "11235:11235"
    environment:
      - CRAWL4AI_API_TOKEN=${CRAWL4AI_API_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./volumes/shm:/dev/shm
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11235/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - supa-network

  # Supabase Studio
  studio:
    image: supabase/studio:20241028-a265374
    container_name: supachat-studio
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      meta:
        condition: service_started
    ports:
      - "3001:3000"  # Expose Studio on port 3001
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: Supa Chat
      DEFAULT_PROJECT_NAME: Supa Chat
      SUPABASE_URL: http://kong:8000
      SUPABASE_PUBLIC_URL: http://localhost:8002
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      NEXT_PUBLIC_ENABLE_LOGS: true
      NEXT_ANALYTICS_BACKEND_PROVIDER: postgres
    networks:
      - supa-network

  # Supabase Kong API Gateway
  kong:
    image: kong:2.8.1
    container_name: supachat-kong
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rest:
        condition: service_started
      meta:
        condition: service_started
    ports:
      - "8002:8000"  # Changed from default 8000 to 8002
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      DASHBOARD_USERNAME: supabase
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    volumes:
      - ./volumes/api/kong.yml:/home/kong/kong.yml:ro
    networks:
      - supa-network

  # Supabase REST API
  rest:
    image: postgrest/postgrest:v11.2.0
    container_name: supachat-rest
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@db:5432/postgres
      PGRST_DB_SCHEMA: public,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    networks:
      - supa-network

  # Supabase Meta
  meta:
    image: supabase/postgres-meta:v0.75.0
    container_name: supachat-meta
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - supa-network

  # Supabase Database
  db:
    image: supabase/postgres:15.8.1.048
    container_name: supachat-db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 60s
    command:
      - postgres
      - -c
      - listen_addresses=*
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./volumes/db/init:/docker-entrypoint-initdb.d
    networks:
      - supa-network

networks:
  supa-network:
    name: supachat-network
    driver: bridge

volumes:
  pgdata:
    name: supachat-pgdata 